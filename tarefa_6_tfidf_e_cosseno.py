# -*- coding: utf-8 -*-
"""Tarefa 6 - TFIDF e Cosseno

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DB7fItQ3rtAHEmhaLEDQ0z4vC0HuawFJ

#Thomas Frentzel
1. Sua tarefa será gerar a matriz termo-documento usando TF-IDF por meio da aplicação das 
fórmulas  TF-IDF  na  matriz  termo-documento  criada  com  a  utilização  do  algoritmo  Bag of 
Words. Sobre o Corpus que recuperamos anteriormente. O entregável desta tarefa é uma 
matriz termo-documento onde a primeira linha são os termos e as linhas subsequentes são 
os vetores calculados com o TF-IDF. 
2. Sua tarefa será gerar uma matriz de distância, computando o cosseno do ângulo entre todos 
os vetores que encontramos usando o tf-idf. Para isso use a seguinte fórmula para o cálculo 
do  cosseno  use  a  fórmula  apresentada  em  Word2Vector  (frankalcantara.com) 
(https://frankalcantara.com/Aulas/Nlp/out/Aula4.html#/0/4/2)  e  apresentada  na  figura  a 
seguir:O resultado deste trabalho será uma matriz que relaciona cada um dos vetores já calculados 
com todos os outros vetores disponíveis na matriz termo-documento mostrando a distância 
entre cada um destes vetores.

Corpus
"""

#importa as bibliotecas

from bs4 import BeautifulSoup
import requests
import string
import numpy 

text = []
textlist = []

url_1 = 'https://www.datarobot.com/blog/what-is-natural-language-processing-introduction-to-nlp/'

html1 = requests.get(url_1)#pega o html da pagina
site1 = BeautifulSoup(html1.content, 'html.parser')#pega o conteudo do html
pegarconteudos1 = site1.find_all("p")#pega todos os paragrafos do html
for url_1 in pegarconteudos1:#pega o conteudo de cada paragrafo
  text.append(url_1.get_text())#adiciona o conteudo de cada paragrafo em uma lista

url_2 = 'https://www.qualtrics.com/experience-management/customer/natural-language-processing/'

html2 = requests.get(url_2)#pega o html da pagina 2
site2 = BeautifulSoup(html2.content, 'html.parser')#pega o conteudo do html 2
pegarconteudos2 = site2.find_all("p")#pega todos os paragrafos do html 2
for url_2 in pegarconteudos2:#pega o conteudo de cada paragrafo do url 2
  text.append(url_2.get_text())#adiciona o conteudo de cada paragrafo da url 2 em uma lista

url_3 = 'https://www.oanayucel.ro/en/nlp-what-is-it-and-how-can-it-help-you/'

html3 = requests.get(url_3)#pega o html da pagina 3
site3 = BeautifulSoup(html3.content, 'html.parser')#pega o conteudo do html 3
pegarconteudos3 = site3.find_all("p")#pega todos os paragrafos do html 3
for url_3 in pegarconteudos3:#pega o conteudo de cada paragrafo do url 3
  text.append(url_3.get_text())#adiciona o conteudo de cada paragrafo da url 3 em uma lista

url_4 = 'https://viso.ai/deep-learning/natural-language-processing/'

html4 = requests.get(url_4)#pega o html da pagina 4
site4 = BeautifulSoup(html4.content, 'html.parser')#pega o conteudo do html 4
pegarconteudos4 = site4.find_all("p")#pega todos os paragrafos do html 4
for url_4 in pegarconteudos4:#pega o conteudo de cada paragrafo do url 4
  text.append(url_4.get_text())# adiciona o conteudo de cada paragrafo da url 4 em uma lista

url_5 = 'https://www.oracle.com/hk/artificial-intelligence/what-is-natural-language-processing/'

html5 = requests.get(url_5)# pega o html da pagina 5
site5 = BeautifulSoup(html5.content, 'html.parser')#pega o conteudo do html 5/*
pegarconteudos5 = site5.find_all("p")#pega todos os paragrafos do html 5
for url_5 in pegarconteudos5:#pega o conteudo de cada paragrafo do url 5
  text.append(url_5.get_text())#adiciona o conteudo de cada paragrafo da url 5 em uma lista
textlist.append(text)#adiciona a lista text em uma lista

print(textlist)

"""Bag of Words

"""

palavras = []#lista de palavras
numerodefrases = 0# numero de frases
for text in textlist:#pega o conteudo de cada paragrafo da lista text
  for frase in text:#pega o conteudo de cada paragrafo da lista text
    numerodefrases += 1#incrementa o numero de frases
    for palavra in frase.split(' '):#pega o conteudo de cada paragrafo da lista text
      if palavra not in palavras:#se o palavra nao estiver na lista de palavras
        palavras.append(palavra)#adiciona o palavra na lista de palavras
BOW = numpy.zeros((numerodefrases,len(palavras)))#cria uma matriz de zeros com o numero de frases e o numero de palavras
numerodefrases = 0#numero da frase atual
for text in textlist:#pega o conteudo de cada paragrafo da lista text
  for frases in text:# pega o conteudo de cada paragrafo da lista text
    for palavra in frases.split(' '):#pega o conteudo de cada paragrafo da lista text
      BOW[numerodefrases][palavras.index(palavra)] += 1#incrementa o numero de palavras
    numerodefrases += 1#incrementa o numero da frase atual
    print(BOW)

"""TF"""

numerodefrases = 0#numero da frase atual
TF = numpy.zeros((len(BOW),len(BOW[0])))#cria uma matriz de zeros com o numero de frases e o numero de palavras
for text in textlist:#pega o conteudo de cada paragrafo da lista text
  for frases in text:#pega o conteudo de cada paragrafo da lista text
    numerodepalavras = len(frases.split(' '))#pega o conteudo de cada paragrafo da lista text
    for palavra in frases.split(' '):
      TF[numerodefrases][palavras.index(palavra)] = BOW[numerodefrases][palavras.index(palavra)] / numerodepalavras#calcula o TF
    numerodefrases += 1#incrementa o numero da frase atual
print(TF)#imprime o TF

"""
IDF
"""

IDF = []#lista de IDF
for palavra in range(len(palavras)):#pega o conteudo de cada paragrafo da lista text
  palavrasanalisadas = 0#numero de palavras analisadas
  for frasesanalisadas in BOW:#pega o conteudo de cada paragrafo da lista text
    if frasesanalisadas[palavra] > 0: palavrasanalisadas += 1#incrementa o numero de palavras analisadas
  IDF.append(numpy.log10(len(BOW)/palavrasanalisadas))#calcula o IDF
  print(IDF)#imprime o IDF

"""TFIDF"""

TFIDF = numpy.zeros((len(BOW),len(BOW[0])))#cria uma matriz de zeros com o numero de frases e o numero de palavras
for a in range(len(TFIDF)):#pega o conteudo de cada paragrafo da lista text
  for b in range(len(TFIDF[0])):#pega o conteudo de cada paragrafo da lista text
    TFIDF[a][b] = TF[a][b] * IDF[b]#calcula o TFIDF
print(TFIDF)#imprime o TFIDF

"""Similaridade de cosseno"""

arraysTFIDF = numpy.zeros((len(TFIDF),len(TFIDF)))#cria uma matriz de zeros com o numero de frases e o numero de palavras
array = 0
for vector in TFIDF:#pega o conteudo de cada paragrafo da lista text
  a = array#pega o conteudo de cada paragrafo da lista text
  while a < len(TFIDF):
    distancia = numpy.dot(vector,TFIDF[a])/(numpy.linalg.norm(vector)*numpy.linalg.norm(TFIDF[a])) #calcula a distancia entre os vetores
    arraysTFIDF[array][a] = distancia#adiciona a distancia na matriz de distancia
    arraysTFIDF[a][array] = distancia
    array += 1
    a += 1#incrementa o numero da frase atual  

print(arraysTFIDF)#imprime a matriz de distancia
